// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pizzaland/pizzaland.proto

package pizzalndv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SaveRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaveRequestMultiError, or
// nil if none found.
func (m *SaveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPizza()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveRequestValidationError{
					field:  "Pizza",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveRequestValidationError{
					field:  "Pizza",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPizza()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveRequestValidationError{
				field:  "Pizza",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveRequestMultiError(errors)
	}

	return nil
}

// SaveRequestMultiError is an error wrapping multiple validation errors
// returned by SaveRequest.ValidateAll() if the designated constraints aren't met.
type SaveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveRequestMultiError) AllErrors() []error { return m }

// SaveRequestValidationError is the validation error returned by
// SaveRequest.Validate if the designated constraints aren't met.
type SaveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveRequestValidationError) ErrorName() string { return "SaveRequestValidationError" }

// Error satisfies the builtin error interface
func (e SaveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveRequestValidationError{}

// Validate checks the field values on SaveResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaveResponseMultiError, or
// nil if none found.
func (m *SaveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PizzaId

	if len(errors) > 0 {
		return SaveResponseMultiError(errors)
	}

	return nil
}

// SaveResponseMultiError is an error wrapping multiple validation errors
// returned by SaveResponse.ValidateAll() if the designated constraints aren't met.
type SaveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveResponseMultiError) AllErrors() []error { return m }

// SaveResponseValidationError is the validation error returned by
// SaveResponse.Validate if the designated constraints aren't met.
type SaveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveResponseValidationError) ErrorName() string { return "SaveResponseValidationError" }

// Error satisfies the builtin error interface
func (e SaveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveResponseValidationError{}

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRequestMultiError, or
// nil if none found.
func (m *GetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Identifier.(type) {
	case *GetRequest_PizzaId:
		if v == nil {
			err := GetRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetPizzaId() <= 0 {
			err := GetRequestValidationError{
				field:  "PizzaId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *GetRequest_PizzaName:
		if v == nil {
			err := GetRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetPizzaName()); l < 3 || l > 50 {
			err := GetRequestValidationError{
				field:  "PizzaName",
				reason: "value length must be between 3 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetRequestMultiError(errors)
	}

	return nil
}

// GetRequestMultiError is an error wrapping multiple validation errors
// returned by GetRequest.ValidateAll() if the designated constraints aren't met.
type GetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRequestMultiError) AllErrors() []error { return m }

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

// Validate checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetResponseMultiError, or
// nil if none found.
func (m *GetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPizza()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResponseValidationError{
					field:  "Pizza",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResponseValidationError{
					field:  "Pizza",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPizza()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResponseValidationError{
				field:  "Pizza",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetResponseMultiError(errors)
	}

	return nil
}

// GetResponseMultiError is an error wrapping multiple validation errors
// returned by GetResponse.ValidateAll() if the designated constraints aren't met.
type GetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResponseMultiError) AllErrors() []error { return m }

// GetResponseValidationError is the validation error returned by
// GetResponse.Validate if the designated constraints aren't met.
type GetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponseValidationError) ErrorName() string { return "GetResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponseValidationError{}

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRequestMultiError, or
// nil if none found.
func (m *ListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOffset() < 48 {
		err := ListRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 48",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ListRequest_Limit_InLookup[m.GetLimit()]; !ok {
		err := ListRequestValidationError{
			field:  "Limit",
			reason: "value must be in list [12 24 36 48]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.CategoryId != nil {

		if wrapper := m.GetCategoryId(); wrapper != nil {

			if wrapper.GetValue() <= 0 {
				err := ListRequestValidationError{
					field:  "CategoryId",
					reason: "value must be greater than 0",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.CategoryName != nil {

		if wrapper := m.GetCategoryName(); wrapper != nil {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 3 || l > 26 {
				err := ListRequestValidationError{
					field:  "CategoryName",
					reason: "value length must be between 3 and 26 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return ListRequestMultiError(errors)
	}

	return nil
}

// ListRequestMultiError is an error wrapping multiple validation errors
// returned by ListRequest.ValidateAll() if the designated constraints aren't met.
type ListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestMultiError) AllErrors() []error { return m }

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}

var _ListRequest_Limit_InLookup = map[uint32]struct{}{
	12: {},
	24: {},
	36: {},
	48: {},
}

// Validate checks the field values on ListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListResponseMultiError, or
// nil if none found.
func (m *ListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPizza() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListResponseValidationError{
						field:  fmt.Sprintf("Pizza[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListResponseValidationError{
						field:  fmt.Sprintf("Pizza[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResponseValidationError{
					field:  fmt.Sprintf("Pizza[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListResponseMultiError(errors)
	}

	return nil
}

// ListResponseMultiError is an error wrapping multiple validation errors
// returned by ListResponse.ValidateAll() if the designated constraints aren't met.
type ListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResponseMultiError) AllErrors() []error { return m }

// ListResponseValidationError is the validation error returned by
// ListResponse.Validate if the designated constraints aren't met.
type ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResponseValidationError) ErrorName() string { return "ListResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResponseValidationError{}

// Validate checks the field values on UpdateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRequestMultiError, or
// nil if none found.
func (m *UpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.CategoryId != nil {

		if wrapper := m.GetCategoryId(); wrapper != nil {

			if wrapper.GetValue() <= 0 {
				err := UpdateRequestValidationError{
					field:  "CategoryId",
					reason: "value must be greater than 0",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Name != nil {

		if wrapper := m.GetName(); wrapper != nil {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 3 || l > 50 {
				err := UpdateRequestValidationError{
					field:  "Name",
					reason: "value length must be between 3 and 50 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Description != nil {

		if wrapper := m.GetDescription(); wrapper != nil {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 16 || l > 256 {
				err := UpdateRequestValidationError{
					field:  "Description",
					reason: "value length must be between 16 and 256 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.TypeDough != nil {

		if _, ok := _UpdateRequest_TypeDough_NotInLookup[m.GetTypeDough()]; ok {
			err := UpdateRequestValidationError{
				field:  "TypeDough",
				reason: "value must not be in list [UNKNOWN]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if _, ok := TypeDough_name[int32(m.GetTypeDough())]; !ok {
			err := UpdateRequestValidationError{
				field:  "TypeDough",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Price != nil {

		if wrapper := m.GetPrice(); wrapper != nil {

			if wrapper.GetValue() < 109 {
				err := UpdateRequestValidationError{
					field:  "Price",
					reason: "value must be greater than or equal to 109",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Diameter != nil {

		if wrapper := m.GetDiameter(); wrapper != nil {

			if _, ok := _UpdateRequest_Diameter_InLookup[wrapper.GetValue()]; !ok {
				err := UpdateRequestValidationError{
					field:  "Diameter",
					reason: "value must be in list [26 30 40]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return UpdateRequestMultiError(errors)
	}

	return nil
}

// UpdateRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRequestMultiError) AllErrors() []error { return m }

// UpdateRequestValidationError is the validation error returned by
// UpdateRequest.Validate if the designated constraints aren't met.
type UpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRequestValidationError) ErrorName() string { return "UpdateRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRequestValidationError{}

var _UpdateRequest_TypeDough_NotInLookup = map[TypeDough]struct{}{
	0: {},
}

var _UpdateRequest_Diameter_InLookup = map[uint32]struct{}{
	26: {},
	30: {},
	40: {},
}

// Validate checks the field values on UpdateResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateResponseMultiError,
// or nil if none found.
func (m *UpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateResponseMultiError(errors)
	}

	return nil
}

// UpdateResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResponseMultiError) AllErrors() []error { return m }

// UpdateResponseValidationError is the validation error returned by
// UpdateResponse.Validate if the designated constraints aren't met.
type UpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResponseValidationError) ErrorName() string { return "UpdateResponseValidationError" }

// Error satisfies the builtin error interface
func (e UpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResponseValidationError{}

// Validate checks the field values on RemoveRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RemoveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RemoveRequestMultiError, or
// nil if none found.
func (m *RemoveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Identifier.(type) {
	case *RemoveRequest_PizzaId:
		if v == nil {
			err := RemoveRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetPizzaId() <= 0 {
			err := RemoveRequestValidationError{
				field:  "PizzaId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *RemoveRequest_PizzaName:
		if v == nil {
			err := RemoveRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if utf8.RuneCountInString(m.GetPizzaName()) < 3 {
			err := RemoveRequestValidationError{
				field:  "PizzaName",
				reason: "value length must be at least 3 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RemoveRequestMultiError(errors)
	}

	return nil
}

// RemoveRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveRequestMultiError) AllErrors() []error { return m }

// RemoveRequestValidationError is the validation error returned by
// RemoveRequest.Validate if the designated constraints aren't met.
type RemoveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveRequestValidationError) ErrorName() string { return "RemoveRequestValidationError" }

// Error satisfies the builtin error interface
func (e RemoveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveRequestValidationError{}

// Validate checks the field values on RemoveResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RemoveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RemoveResponseMultiError,
// or nil if none found.
func (m *RemoveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RemoveResponseMultiError(errors)
	}

	return nil
}

// RemoveResponseMultiError is an error wrapping multiple validation errors
// returned by RemoveResponse.ValidateAll() if the designated constraints
// aren't met.
type RemoveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveResponseMultiError) AllErrors() []error { return m }

// RemoveResponseValidationError is the validation error returned by
// RemoveResponse.Validate if the designated constraints aren't met.
type RemoveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveResponseValidationError) ErrorName() string { return "RemoveResponseValidationError" }

// Error satisfies the builtin error interface
func (e RemoveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveResponseValidationError{}

// Validate checks the field values on SaveCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveCategoryRequestMultiError, or nil if none found.
func (m *SaveCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveCategoryRequestValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveCategoryRequestValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveCategoryRequestValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveCategoryRequestMultiError(errors)
	}

	return nil
}

// SaveCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by SaveCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type SaveCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveCategoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveCategoryRequestMultiError) AllErrors() []error { return m }

// SaveCategoryRequestValidationError is the validation error returned by
// SaveCategoryRequest.Validate if the designated constraints aren't met.
type SaveCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveCategoryRequestValidationError) ErrorName() string {
	return "SaveCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveCategoryRequestValidationError{}

// Validate checks the field values on SaveCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveCategoryResponseMultiError, or nil if none found.
func (m *SaveCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return SaveCategoryResponseMultiError(errors)
	}

	return nil
}

// SaveCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by SaveCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type SaveCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveCategoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveCategoryResponseMultiError) AllErrors() []error { return m }

// SaveCategoryResponseValidationError is the validation error returned by
// SaveCategoryResponse.Validate if the designated constraints aren't met.
type SaveCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveCategoryResponseValidationError) ErrorName() string {
	return "SaveCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SaveCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveCategoryResponseValidationError{}

// Validate checks the field values on GetCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryRequestMultiError, or nil if none found.
func (m *GetCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Identifier.(type) {
	case *GetCategoryRequest_CategoryId:
		if v == nil {
			err := GetCategoryRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetCategoryId() <= 0 {
			err := GetCategoryRequestValidationError{
				field:  "CategoryId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *GetCategoryRequest_CategoryName:
		if v == nil {
			err := GetCategoryRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if utf8.RuneCountInString(m.GetCategoryName()) < 3 {
			err := GetCategoryRequestValidationError{
				field:  "CategoryName",
				reason: "value length must be at least 3 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetCategoryRequestMultiError(errors)
	}

	return nil
}

// GetCategoryRequestMultiError is an error wrapping multiple validation errors
// returned by GetCategoryRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryRequestMultiError) AllErrors() []error { return m }

// GetCategoryRequestValidationError is the validation error returned by
// GetCategoryRequest.Validate if the designated constraints aren't met.
type GetCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryRequestValidationError) ErrorName() string {
	return "GetCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryRequestValidationError{}

// Validate checks the field values on GetCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryResponseMultiError, or nil if none found.
func (m *GetCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPizza()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCategoryResponseValidationError{
					field:  "Pizza",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCategoryResponseValidationError{
					field:  "Pizza",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPizza()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCategoryResponseValidationError{
				field:  "Pizza",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCategoryResponseMultiError(errors)
	}

	return nil
}

// GetCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by GetCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryResponseMultiError) AllErrors() []error { return m }

// GetCategoryResponseValidationError is the validation error returned by
// GetCategoryResponse.Validate if the designated constraints aren't met.
type GetCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryResponseValidationError) ErrorName() string {
	return "GetCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryResponseValidationError{}

// Validate checks the field values on UpdateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryRequestMultiError, or nil if none found.
func (m *UpdateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {

		if wrapper := m.GetName(); wrapper != nil {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 3 || l > 26 {
				err := UpdateCategoryRequestValidationError{
					field:  "Name",
					reason: "value length must be between 3 and 26 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Description != nil {

		if wrapper := m.GetDescription(); wrapper != nil {

			if l := utf8.RuneCountInString(wrapper.GetValue()); l < 16 || l > 256 {
				err := UpdateCategoryRequestValidationError{
					field:  "Description",
					reason: "value length must be between 16 and 256 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return UpdateCategoryRequestMultiError(errors)
	}

	return nil
}

// UpdateCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryRequestMultiError) AllErrors() []error { return m }

// UpdateCategoryRequestValidationError is the validation error returned by
// UpdateCategoryRequest.Validate if the designated constraints aren't met.
type UpdateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryRequestValidationError) ErrorName() string {
	return "UpdateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryRequestValidationError{}

// Validate checks the field values on UpdateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryResponseMultiError, or nil if none found.
func (m *UpdateCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateCategoryResponseMultiError(errors)
	}

	return nil
}

// UpdateCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryResponseMultiError) AllErrors() []error { return m }

// UpdateCategoryResponseValidationError is the validation error returned by
// UpdateCategoryResponse.Validate if the designated constraints aren't met.
type UpdateCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryResponseValidationError) ErrorName() string {
	return "UpdateCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryResponseValidationError{}

// Validate checks the field values on RemoveCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveCategoryRequestMultiError, or nil if none found.
func (m *RemoveCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Identifier.(type) {
	case *RemoveCategoryRequest_CategoryId:
		if v == nil {
			err := RemoveCategoryRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetCategoryId() <= 0 {
			err := RemoveCategoryRequestValidationError{
				field:  "CategoryId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *RemoveCategoryRequest_CategoryName:
		if v == nil {
			err := RemoveCategoryRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if utf8.RuneCountInString(m.GetCategoryName()) < 3 {
			err := RemoveCategoryRequestValidationError{
				field:  "CategoryName",
				reason: "value length must be at least 3 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RemoveCategoryRequestMultiError(errors)
	}

	return nil
}

// RemoveCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveCategoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveCategoryRequestMultiError) AllErrors() []error { return m }

// RemoveCategoryRequestValidationError is the validation error returned by
// RemoveCategoryRequest.Validate if the designated constraints aren't met.
type RemoveCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCategoryRequestValidationError) ErrorName() string {
	return "RemoveCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCategoryRequestValidationError{}

// Validate checks the field values on RemoveCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveCategoryResponseMultiError, or nil if none found.
func (m *RemoveCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RemoveCategoryResponseMultiError(errors)
	}

	return nil
}

// RemoveCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveCategoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveCategoryResponseMultiError) AllErrors() []error { return m }

// RemoveCategoryResponseValidationError is the validation error returned by
// RemoveCategoryResponse.Validate if the designated constraints aren't met.
type RemoveCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCategoryResponseValidationError) ErrorName() string {
	return "RemoveCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCategoryResponseValidationError{}

// Validate checks the field values on PizzaProperties with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PizzaProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PizzaProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PizzaPropertiesMultiError, or nil if none found.
func (m *PizzaProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *PizzaProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCategoryId() <= 0 {
		err := PizzaPropertiesValidationError{
			field:  "CategoryId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 50 {
		err := PizzaPropertiesValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetDescription(); wrapper != nil {

		if l := utf8.RuneCountInString(wrapper.GetValue()); l < 16 || l > 256 {
			err := PizzaPropertiesValidationError{
				field:  "Description",
				reason: "value length must be between 16 and 256 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if _, ok := _PizzaProperties_TypeDough_NotInLookup[m.GetTypeDough()]; ok {
		err := PizzaPropertiesValidationError{
			field:  "TypeDough",
			reason: "value must not be in list [UNKNOWN]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := TypeDough_name[int32(m.GetTypeDough())]; !ok {
		err := PizzaPropertiesValidationError{
			field:  "TypeDough",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPrice() < 109 {
		err := PizzaPropertiesValidationError{
			field:  "Price",
			reason: "value must be greater than or equal to 109",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _PizzaProperties_Diameter_InLookup[m.GetDiameter()]; !ok {
		err := PizzaPropertiesValidationError{
			field:  "Diameter",
			reason: "value must be in list [26 30 40]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.PizzaId != nil {

		if wrapper := m.GetPizzaId(); wrapper != nil {

			if wrapper.GetValue() <= 0 {
				err := PizzaPropertiesValidationError{
					field:  "PizzaId",
					reason: "value must be greater than 0",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return PizzaPropertiesMultiError(errors)
	}

	return nil
}

// PizzaPropertiesMultiError is an error wrapping multiple validation errors
// returned by PizzaProperties.ValidateAll() if the designated constraints
// aren't met.
type PizzaPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PizzaPropertiesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PizzaPropertiesMultiError) AllErrors() []error { return m }

// PizzaPropertiesValidationError is the validation error returned by
// PizzaProperties.Validate if the designated constraints aren't met.
type PizzaPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PizzaPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PizzaPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PizzaPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PizzaPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PizzaPropertiesValidationError) ErrorName() string { return "PizzaPropertiesValidationError" }

// Error satisfies the builtin error interface
func (e PizzaPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPizzaProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PizzaPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PizzaPropertiesValidationError{}

var _PizzaProperties_TypeDough_NotInLookup = map[TypeDough]struct{}{
	0: {},
}

var _PizzaProperties_Diameter_InLookup = map[uint32]struct{}{
	26: {},
	30: {},
	40: {},
}

// Validate checks the field values on CategoryProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryPropertiesMultiError, or nil if none found.
func (m *CategoryProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 26 {
		err := CategoryPropertiesValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 26 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetDescription(); wrapper != nil {

		if l := utf8.RuneCountInString(wrapper.GetValue()); l < 16 || l > 256 {
			err := CategoryPropertiesValidationError{
				field:  "Description",
				reason: "value length must be between 16 and 256 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.CategoryId != nil {

		if wrapper := m.GetCategoryId(); wrapper != nil {

			if wrapper.GetValue() <= 0 {
				err := CategoryPropertiesValidationError{
					field:  "CategoryId",
					reason: "value must be greater than 0",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return CategoryPropertiesMultiError(errors)
	}

	return nil
}

// CategoryPropertiesMultiError is an error wrapping multiple validation errors
// returned by CategoryProperties.ValidateAll() if the designated constraints
// aren't met.
type CategoryPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryPropertiesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryPropertiesMultiError) AllErrors() []error { return m }

// CategoryPropertiesValidationError is the validation error returned by
// CategoryProperties.Validate if the designated constraints aren't met.
type CategoryPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryPropertiesValidationError) ErrorName() string {
	return "CategoryPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryPropertiesValidationError{}
